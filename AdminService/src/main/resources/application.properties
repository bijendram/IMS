# ORM Config Properties
server.port=8084
spring.application.name=ADMIN-SERVICE


#DB Configuration
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=InsuranceManagementSystem
#spring.data.mongodb.username=
#spring.data.mongodb.password=

# As Admin is acting as a client, as this service is calling user-service.

spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-82466264.okta.com/oauth2/default
#https://docs.spring.io/spring-security/reference/servlet/oauth2/login/core.html
# Give client registration name, here, my-internal-client
spring.security.oauth2.client.registration.my-internal-client.provider=okta
spring.security.oauth2.client.registration.my-internal-client.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.my-internal-client.scope=internal
spring.security.oauth2.client.registration.my-internal-client.client-id=0oaaozwfmkJRHaWVV5d7
spring.security.oauth2.client.registration.my-internal-client.client-secret=QrYJqAAgYdSVahetmyN36IpP8LHoYfhuJbyRA_7As14SyYmWnFCJvXaev3aezJPr


# Eureka Client Configuration

# We will fetch this from config-server, so commented. As it is common property on all micro-services,
# we are fetching this from config-server from Config-Service properties [spring.cloud.config.server.git.uri=https://github.com/bijendram/IMS-config]

#eureka.client.register-with-eureka=true
#eureka.client.fetch-registry=true
#eureka.instance.prefer-ip-address=true
#eureka.client.service-url.defaultZone=http://localhost:8085/eureka


# Config Server Properties for importing configuration from config server
spring.config.import= optional:configserver:http://localhost:8087

#This will import prod configuration from config server from Git, if nothing mentioned default will be imported
# Here, we can have spring.profiles.active=prod or spring.profiles.active=dev as we have in Git
spring.profiles.active=


spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER


# Spring Boot Actuator Settings
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always
logging.level.org.springframework.boot.actuator=DEBUG

# Resilience4j CircuitBreaker Settings
resilience4j.circuitbreaker.instances.callingUserService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.callingUserService.eventConsumerBufferSize=10
resilience4j.circuitbreaker.instances.callingUserService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.callingUserService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.callingUserService.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.callingUserService.waitDurationInOpenState=6s
resilience4j.circuitbreaker.instances.callingUserService.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.callingUserService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.callingUserService.slidingWindowType=COUNT_BASED

# Resilience4j Retry Settings
resilience4j.retry.instances.callingUserServiceRetry.max-attempts=3
resilience4j.retry.instances.callingUserServiceRetry.wait-duration=5s

# Resilience4j RateLimiter Settings
resilience4j.ratelimiter.instances.callingUserServiceLimiter.limit-for-period=2
resilience4j.ratelimiter.instances.callingUserServiceLimiter.limit-refresh-period=6s
resilience4j.ratelimiter.instances.callingUserServiceLimiter.timeout-duration=4s



#okta configuration for api gateway

okta.oauth2.issuer=https://dev-82466264.okta.com/oauth2/default
okta.oauth2.audience=api://default



